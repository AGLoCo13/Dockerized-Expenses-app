{"ast":null,"code":"var _jsxFileName = \"/home/tonyg/Node-React.js-Expenses-Application/frontend/src/components/CalculateExpenses.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState, useMemo } from 'react';\nimport axios from 'axios';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport 'react-toastify/dist/ReactToastify.css';\nimport { toast } from 'react-toastify';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction CalculateExpenses() {\n  _s();\n  //Defining the Data set\n  const [data, setData] = useState({\n    apartments: [],\n    consumptions: [],\n    building: {},\n    expenses: [],\n    total: {\n      heating: 0.0,\n      elevator: 0.0,\n      general: 0.0\n    }\n  });\n  const [apartmentExpenses, setApartmentExpenses] = useState({});\n  useEffect(() => {\n    //Fetching the Required data from the database\n    const fetchData = async () => {\n      const token = window.localStorage.getItem('token');\n      const currentDate = new Date();\n      const month = currentDate.getMonth() + 1;\n      const year = currentDate.getFullYear();\n      //Get the administrator's profile and authorize him if he has valid token\n      const profileResponse = await axios.get('/api/profile', {\n        headers: {\n          Authorization: token\n        }\n      });\n      if (profileResponse.data.profileId || profileResponse.data.userId) {\n        const buildingId = profileResponse.data.profileId;\n        const userId = profileResponse.data.userId;\n        //Building response , expensesResponse\n        const [buildingResponse, expensesResponse] = await Promise.all([axios.get(`/api/buildings/${buildingId}`), axios.get(`/api/expenses/${userId}`)]);\n        const fetchedBuilding = buildingResponse.data;\n        //Apartments that are tied to the building Response\n        const apartmentsResponse = await axios.get(`http://40.113.37.29/aps/Apartments/${fetchedBuilding._id}`);\n        const allConsumptionsResponses = await Promise.all(apartmentsResponse.data.map(apartment => axios.get(`http://40.113.37.29/api/consumptions/${apartment._id}`)));\n        //Consumptions Response\n        const allConsumptions = allConsumptionsResponses.flatMap(response => response.data);\n        //Filter the expenses for the current month and year\n        const thisMonthExpenses = expensesResponse.data.filter(expenses => {\n          return expenses.month === month && expenses.year === year;\n        });\n        const newState = {\n          apartments: apartmentsResponse.data,\n          building: buildingResponse.data,\n          expenses: thisMonthExpenses,\n          consumptions: allConsumptions\n        };\n        //Finally set the data with the New State of fetched objects\n        setData(newState);\n      }\n    };\n    fetchData();\n  }, []);\n  //using the useMemo hook to memoize expensive computations so that they are not recalculated on every render\n  useMemo(() => {\n    //Calculation of the totals of every Expense with the use of reduce function\n    const totalHeating = data.expenses.filter(e => e.type_expenses === 'Heating').reduce((acc, curr) => acc + curr.total, 0);\n    const totalElevator = data.expenses.filter(e => e.type_expenses === 'Elevator').reduce((acc, curr) => acc + curr.total, 0);\n    const totalGeneral = data.expenses.reduce((acc, curr) => acc + (curr.type_expenses !== 'Heating' && curr.type_expenses !== 'Elevator' ? curr.total : 0), 0);\n    const apartmentProducts = {};\n    const totalProduct = data.apartments.reduce((acc, apartment) => {\n      var _data$consumptions$fi;\n      //Get the consumption for every apartment\n      const apartmentConsumption = ((_data$consumptions$fi = data.consumptions.find(c => c.apartment._id === apartment._id)) === null || _data$consumptions$fi === void 0 ? void 0 : _data$consumptions$fi.consumption) || 0;\n      //Multiply the heating millimetre with the hours of every apartment\n      const product = apartment.heating * apartmentConsumption;\n      apartmentProducts[apartment._id] = product;\n      return acc + product;\n    }, 0);\n    const calculatedApartmentExpenses = {};\n    data.apartments.forEach(apartment => {\n      //Divide each apartment product with the total product\n      const division = apartmentProducts[apartment._id] / totalProduct;\n      //Total heating is equal to the division of apartmentProducts with the total product\n      calculatedApartmentExpenses[apartment._id] = {\n        heating: division * totalHeating,\n        elevator: apartment.elevator * totalElevator,\n        general: apartment.general_expenses * totalGeneral\n      };\n    });\n    setApartmentExpenses(calculatedApartmentExpenses);\n  }, [data]);\n  const handleCreatePayment = async apartment => {\n    const token = window.localStorage.getItem('token');\n    const month = new Date().getMonth() + 1;\n    const year = new Date().getFullYear();\n    try {\n      //Check if a specific paymnet exists for the current month and year\n      const existingPaymentsResponse = await axios.get(`/api/payments/${apartment._id}`, {\n        headers: {\n          Authorization: token\n        }\n      });\n      const existingPaymentForCurrentMonth = existingPaymentsResponse.data.find(payment => payment.month === month && payment.year === year);\n      if (existingPaymentForCurrentMonth) {\n        // If payment exists for the current month and year , delete it\n        await axios.delete(`/api/payments/${existingPaymentForCurrentMonth._id}`, {\n          headers: {\n            Authorization: token\n          }\n        });\n      }\n    } catch (error) {\n      if (error.response && error.response.status !== 404) {\n        // Log any other error and halt the function\n        console.error('Error checking for existing payments', error);\n        return;\n      }\n      // If the error is 404, it just means no payments exist for the apartment, and we'll continue to create a new one.\n    }\n    try {\n      var _apartmentExpenses$ap, _apartmentExpenses$ap2, _apartmentExpenses$ap3;\n      //Create new Payment\n      const paymentData = {\n        apartment: apartment._id,\n        month: new Date().getMonth() + 1,\n        //JS months are 0-indexed.\n        year: new Date().getFullYear(),\n        total_heating: ((_apartmentExpenses$ap = apartmentExpenses[apartment._id]) === null || _apartmentExpenses$ap === void 0 ? void 0 : _apartmentExpenses$ap.heating) || 0,\n        total_elevator: ((_apartmentExpenses$ap2 = apartmentExpenses[apartment._id]) === null || _apartmentExpenses$ap2 === void 0 ? void 0 : _apartmentExpenses$ap2.elevator) || 0,\n        total_general: ((_apartmentExpenses$ap3 = apartmentExpenses[apartment._id]) === null || _apartmentExpenses$ap3 === void 0 ? void 0 : _apartmentExpenses$ap3.general) || 0,\n        payment_made: false\n      };\n      const response = await axios.post('/api/payments', paymentData, {\n        headers: {\n          Authorization: token\n        }\n      });\n      if (response.status === 200) {\n        toast.success(\"Payment Created succesfully\");\n      } else {\n        toast.error(\"Failed to create payment\");\n      }\n    } catch (error) {\n      console.error('Error creating payment', error);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container mt-5\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      className: \"mb-5\",\n      children: \"Apartment Expenses\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 157,\n      columnNumber: 7\n    }, this), data.apartments.map(apartment => {\n      var _apartmentExpenses$ap4, _apartmentExpenses$ap5, _apartmentExpenses$ap6;\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"card mb-3\",\n        style: {\n          maxWidth: \"18rem\"\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"card-header bg-primary text-white\",\n          children: [apartment.name, \" - Floor: \", apartment.floor]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 160,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"card-body\",\n          children: [/*#__PURE__*/_jsxDEV(\"p\", {\n            className: \"card-text\",\n            children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n              children: \"Heating:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 165,\n              columnNumber: 17\n            }, this), \" \", (_apartmentExpenses$ap4 = apartmentExpenses[apartment._id]) === null || _apartmentExpenses$ap4 === void 0 ? void 0 : _apartmentExpenses$ap4.heating.toFixed(2)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 164,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            className: \"card-text\",\n            children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n              children: \"Elevator:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 168,\n              columnNumber: 17\n            }, this), \" \", (_apartmentExpenses$ap5 = apartmentExpenses[apartment._id]) === null || _apartmentExpenses$ap5 === void 0 ? void 0 : _apartmentExpenses$ap5.elevator.toFixed(2)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 167,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            className: \"card-text\",\n            children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n              children: \"General:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 171,\n              columnNumber: 15\n            }, this), \" \", (_apartmentExpenses$ap6 = apartmentExpenses[apartment._id]) === null || _apartmentExpenses$ap6 === void 0 ? void 0 : _apartmentExpenses$ap6.general.toFixed(2)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 170,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"btn btn-success\",\n            onClick: () => handleCreatePayment(apartment),\n            children: \" Create Payment\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 173,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 163,\n          columnNumber: 11\n        }, this)]\n      }, apartment._id, true, {\n        fileName: _jsxFileName,\n        lineNumber: 159,\n        columnNumber: 7\n      }, this);\n    })]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 156,\n    columnNumber: 5\n  }, this);\n}\n_s(CalculateExpenses, \"HImYSKdk9y13E0n9t9AEeXo1LO8=\");\n_c = CalculateExpenses;\nexport default CalculateExpenses;\nvar _c;\n$RefreshReg$(_c, \"CalculateExpenses\");","map":{"version":3,"names":["React","useEffect","useState","useMemo","axios","toast","jsxDEV","_jsxDEV","CalculateExpenses","_s","data","setData","apartments","consumptions","building","expenses","total","heating","elevator","general","apartmentExpenses","setApartmentExpenses","fetchData","token","window","localStorage","getItem","currentDate","Date","month","getMonth","year","getFullYear","profileResponse","get","headers","Authorization","profileId","userId","buildingId","buildingResponse","expensesResponse","Promise","all","fetchedBuilding","apartmentsResponse","_id","allConsumptionsResponses","map","apartment","allConsumptions","flatMap","response","thisMonthExpenses","filter","newState","totalHeating","e","type_expenses","reduce","acc","curr","totalElevator","totalGeneral","apartmentProducts","totalProduct","_data$consumptions$fi","apartmentConsumption","find","c","consumption","product","calculatedApartmentExpenses","forEach","division","general_expenses","handleCreatePayment","existingPaymentsResponse","existingPaymentForCurrentMonth","payment","delete","error","status","console","_apartmentExpenses$ap","_apartmentExpenses$ap2","_apartmentExpenses$ap3","paymentData","total_heating","total_elevator","total_general","payment_made","post","success","className","children","fileName","_jsxFileName","lineNumber","columnNumber","_apartmentExpenses$ap4","_apartmentExpenses$ap5","_apartmentExpenses$ap6","style","maxWidth","name","floor","toFixed","onClick","_c","$RefreshReg$"],"sources":["/home/tonyg/Node-React.js-Expenses-Application/frontend/src/components/CalculateExpenses.js"],"sourcesContent":["import React, { useEffect, useState, useMemo } from 'react';\nimport axios from 'axios';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport 'react-toastify/dist/ReactToastify.css';\nimport { toast } from 'react-toastify';\nfunction CalculateExpenses() {\n  //Defining the Data set\n  const [data, setData] = useState({\n    apartments: [],\n    consumptions: [],\n    building: {},\n    expenses: [],\n    total: {\n      heating: 0.0,\n      elevator: 0.0,\n      general: 0.0,\n    },\n  });\n  const [apartmentExpenses, setApartmentExpenses] = useState({});\n  useEffect(() => {\n    //Fetching the Required data from the database\n    const fetchData = async () => {\n      const token = window.localStorage.getItem('token');\n\n      const currentDate = new Date();\n      const month = currentDate.getMonth() + 1;\n      const year = currentDate.getFullYear();\n      //Get the administrator's profile and authorize him if he has valid token\n      const profileResponse = await axios.get('/api/profile', {\n        headers: { Authorization: token },\n      });\n\n      if (profileResponse.data.profileId || profileResponse.data.userId) {\n        const buildingId = profileResponse.data.profileId;\n        const userId = profileResponse.data.userId;\n        //Building response , expensesResponse\n        const [buildingResponse, expensesResponse] = await Promise.all([\n          axios.get(`/api/buildings/${buildingId}`),\n          axios.get(`/api/expenses/${userId}`),\n        ]);\n        const fetchedBuilding = buildingResponse.data;\n        //Apartments that are tied to the building Response\n        const apartmentsResponse = await axios.get(`http://40.113.37.29/aps/Apartments/${fetchedBuilding._id}`);\n        const allConsumptionsResponses = await Promise.all(\n          apartmentsResponse.data.map((apartment) =>\n            axios.get(`http://40.113.37.29/api/consumptions/${apartment._id}`)\n          )\n        );\n        //Consumptions Response\n        const allConsumptions = allConsumptionsResponses.flatMap(response => response.data);\n        //Filter the expenses for the current month and year\n        const thisMonthExpenses = expensesResponse.data.filter(expenses => {\n          return expenses.month === month && expenses.year === year;\n        })\n        const newState = {\n          apartments: apartmentsResponse.data,\n          building: buildingResponse.data,\n          expenses: thisMonthExpenses,\n          consumptions: allConsumptions,\n        };\n        //Finally set the data with the New State of fetched objects\n        setData(newState);\n      }\n      \n    };\n    fetchData();\n  }, []);\n  //using the useMemo hook to memoize expensive computations so that they are not recalculated on every render\n  useMemo(() => {\n    //Calculation of the totals of every Expense with the use of reduce function\n    const totalHeating = data.expenses.filter(e => e.type_expenses === 'Heating').reduce((acc, curr) => acc + curr.total, 0);\n    const totalElevator = data.expenses.filter(e => e.type_expenses === 'Elevator').reduce((acc, curr) => acc + curr.total, 0);\n    const totalGeneral = data.expenses.reduce((acc, curr) => acc + (curr.type_expenses !== 'Heating' && curr.type_expenses !== 'Elevator' ? curr.total : 0), 0);\n    \n    const apartmentProducts = {};\n    const totalProduct = data.apartments.reduce((acc, apartment) => {\n      //Get the consumption for every apartment\n      const apartmentConsumption = data.consumptions.find(c => c.apartment._id === apartment._id)?.consumption || 0;\n      //Multiply the heating millimetre with the hours of every apartment\n      const product = apartment.heating * apartmentConsumption;\n      apartmentProducts[apartment._id] = product;\n      return acc + product;\n    }, 0);\n\n    const calculatedApartmentExpenses = {};\n       \n    data.apartments.forEach(apartment => {\n      //Divide each apartment product with the total product\n      const division = apartmentProducts[apartment._id] / totalProduct;\n      //Total heating is equal to the division of apartmentProducts with the total product\n      calculatedApartmentExpenses[apartment._id] = {\n        heating: division * totalHeating,\n        elevator: apartment.elevator * totalElevator ,\n        general: apartment.general_expenses * totalGeneral,\n      };\n    });\n\n    setApartmentExpenses(calculatedApartmentExpenses);\n  }, [data]);\n\n  const handleCreatePayment = async (apartment) => {\n    const token = window.localStorage.getItem('token');\n    const month = new Date().getMonth() + 1;\n    const year = new Date().getFullYear();\n    try {\n      //Check if a specific paymnet exists for the current month and year\n      const existingPaymentsResponse = await axios.get(`/api/payments/${apartment._id}`,{\n        headers : {Authorization : token},\n      });\n\n      const existingPaymentForCurrentMonth = existingPaymentsResponse.data.find(payment => payment.month === month && payment.year === year );\n\n      if (existingPaymentForCurrentMonth) {\n        // If payment exists for the current month and year , delete it\n        await axios.delete(`/api/payments/${existingPaymentForCurrentMonth._id}`, {\n          headers : {Authorization : token },\n        });\n      }\n      } catch (error) {\n        if (error.response && error.response.status !== 404) {\n            // Log any other error and halt the function\n            console.error('Error checking for existing payments', error);\n            return;\n        }\n        // If the error is 404, it just means no payments exist for the apartment, and we'll continue to create a new one.\n      }\n    try {\n      //Create new Payment\n      const paymentData = {\n        apartment: apartment._id,\n        month: new Date().getMonth() + 1 , //JS months are 0-indexed.\n        year: new Date().getFullYear(),\n        total_heating: apartmentExpenses[apartment._id]?.heating || 0,\n        total_elevator: apartmentExpenses[apartment._id]?.elevator|| 0,\n        total_general: apartmentExpenses[apartment._id]?.general || 0,\n        payment_made: false,\n      };\n      const response = await axios.post('/api/payments', paymentData, {\n        headers: {Authorization: token},\n      })\n      if (response.status === 200) {\n        toast.success(\"Payment Created succesfully\");\n      }else{\n        toast.error(\"Failed to create payment\")\n      }\n    }catch(error){\n      console.error('Error creating payment' , error);\n\n    }\n    \n  }\n\n  \n\n  return (\n    <div className='container mt-5'>\n      <h1 className='mb-5'>Apartment Expenses</h1>\n      {data.apartments.map((apartment) =>  (\n      <div key={apartment._id} className='card mb-3' style= {{ maxWidth: \"18rem\"}}>\n        <div className='card-header bg-primary text-white'>\n            {apartment.name} - Floor: {apartment.floor}\n            </div>\n          <div className='card-body'>\n            <p className='card-text'>\n                <strong>Heating:</strong> {apartmentExpenses[apartment._id]?.heating.toFixed(2)}\n              </p>\n              <p className='card-text'>\n                <strong>Elevator:</strong> {apartmentExpenses[apartment._id]?.elevator.toFixed(2)}\n              </p>\n              <p className='card-text'>\n              <strong>General:</strong> {apartmentExpenses[apartment._id]?.general.toFixed(2)}\n              </p>\n              <button className= 'btn btn-success' onClick={() => handleCreatePayment(apartment)}> Create Payment</button>\n            </div>\n      </div>\n      ))}\n      </div>\n  );\n}\n\nexport default CalculateExpenses;"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,QAAQ,EAAEC,OAAO,QAAQ,OAAO;AAC3D,OAAOC,KAAK,MAAM,OAAO;AACzB,OAAO,sCAAsC;AAC7C,OAAO,uCAAuC;AAC9C,SAASC,KAAK,QAAQ,gBAAgB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AACvC,SAASC,iBAAiBA,CAAA,EAAG;EAAAC,EAAA;EAC3B;EACA,MAAM,CAACC,IAAI,EAAEC,OAAO,CAAC,GAAGT,QAAQ,CAAC;IAC/BU,UAAU,EAAE,EAAE;IACdC,YAAY,EAAE,EAAE;IAChBC,QAAQ,EAAE,CAAC,CAAC;IACZC,QAAQ,EAAE,EAAE;IACZC,KAAK,EAAE;MACLC,OAAO,EAAE,GAAG;MACZC,QAAQ,EAAE,GAAG;MACbC,OAAO,EAAE;IACX;EACF,CAAC,CAAC;EACF,MAAM,CAACC,iBAAiB,EAAEC,oBAAoB,CAAC,GAAGnB,QAAQ,CAAC,CAAC,CAAC,CAAC;EAC9DD,SAAS,CAAC,MAAM;IACd;IACA,MAAMqB,SAAS,GAAG,MAAAA,CAAA,KAAY;MAC5B,MAAMC,KAAK,GAAGC,MAAM,CAACC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC;MAElD,MAAMC,WAAW,GAAG,IAAIC,IAAI,CAAC,CAAC;MAC9B,MAAMC,KAAK,GAAGF,WAAW,CAACG,QAAQ,CAAC,CAAC,GAAG,CAAC;MACxC,MAAMC,IAAI,GAAGJ,WAAW,CAACK,WAAW,CAAC,CAAC;MACtC;MACA,MAAMC,eAAe,GAAG,MAAM7B,KAAK,CAAC8B,GAAG,CAAC,cAAc,EAAE;QACtDC,OAAO,EAAE;UAAEC,aAAa,EAAEb;QAAM;MAClC,CAAC,CAAC;MAEF,IAAIU,eAAe,CAACvB,IAAI,CAAC2B,SAAS,IAAIJ,eAAe,CAACvB,IAAI,CAAC4B,MAAM,EAAE;QACjE,MAAMC,UAAU,GAAGN,eAAe,CAACvB,IAAI,CAAC2B,SAAS;QACjD,MAAMC,MAAM,GAAGL,eAAe,CAACvB,IAAI,CAAC4B,MAAM;QAC1C;QACA,MAAM,CAACE,gBAAgB,EAAEC,gBAAgB,CAAC,GAAG,MAAMC,OAAO,CAACC,GAAG,CAAC,CAC7DvC,KAAK,CAAC8B,GAAG,CAAE,kBAAiBK,UAAW,EAAC,CAAC,EACzCnC,KAAK,CAAC8B,GAAG,CAAE,iBAAgBI,MAAO,EAAC,CAAC,CACrC,CAAC;QACF,MAAMM,eAAe,GAAGJ,gBAAgB,CAAC9B,IAAI;QAC7C;QACA,MAAMmC,kBAAkB,GAAG,MAAMzC,KAAK,CAAC8B,GAAG,CAAE,sCAAqCU,eAAe,CAACE,GAAI,EAAC,CAAC;QACvG,MAAMC,wBAAwB,GAAG,MAAML,OAAO,CAACC,GAAG,CAChDE,kBAAkB,CAACnC,IAAI,CAACsC,GAAG,CAAEC,SAAS,IACpC7C,KAAK,CAAC8B,GAAG,CAAE,wCAAuCe,SAAS,CAACH,GAAI,EAAC,CACnE,CACF,CAAC;QACD;QACA,MAAMI,eAAe,GAAGH,wBAAwB,CAACI,OAAO,CAACC,QAAQ,IAAIA,QAAQ,CAAC1C,IAAI,CAAC;QACnF;QACA,MAAM2C,iBAAiB,GAAGZ,gBAAgB,CAAC/B,IAAI,CAAC4C,MAAM,CAACvC,QAAQ,IAAI;UACjE,OAAOA,QAAQ,CAACc,KAAK,KAAKA,KAAK,IAAId,QAAQ,CAACgB,IAAI,KAAKA,IAAI;QAC3D,CAAC,CAAC;QACF,MAAMwB,QAAQ,GAAG;UACf3C,UAAU,EAAEiC,kBAAkB,CAACnC,IAAI;UACnCI,QAAQ,EAAE0B,gBAAgB,CAAC9B,IAAI;UAC/BK,QAAQ,EAAEsC,iBAAiB;UAC3BxC,YAAY,EAAEqC;QAChB,CAAC;QACD;QACAvC,OAAO,CAAC4C,QAAQ,CAAC;MACnB;IAEF,CAAC;IACDjC,SAAS,CAAC,CAAC;EACb,CAAC,EAAE,EAAE,CAAC;EACN;EACAnB,OAAO,CAAC,MAAM;IACZ;IACA,MAAMqD,YAAY,GAAG9C,IAAI,CAACK,QAAQ,CAACuC,MAAM,CAACG,CAAC,IAAIA,CAAC,CAACC,aAAa,KAAK,SAAS,CAAC,CAACC,MAAM,CAAC,CAACC,GAAG,EAAEC,IAAI,KAAKD,GAAG,GAAGC,IAAI,CAAC7C,KAAK,EAAE,CAAC,CAAC;IACxH,MAAM8C,aAAa,GAAGpD,IAAI,CAACK,QAAQ,CAACuC,MAAM,CAACG,CAAC,IAAIA,CAAC,CAACC,aAAa,KAAK,UAAU,CAAC,CAACC,MAAM,CAAC,CAACC,GAAG,EAAEC,IAAI,KAAKD,GAAG,GAAGC,IAAI,CAAC7C,KAAK,EAAE,CAAC,CAAC;IAC1H,MAAM+C,YAAY,GAAGrD,IAAI,CAACK,QAAQ,CAAC4C,MAAM,CAAC,CAACC,GAAG,EAAEC,IAAI,KAAKD,GAAG,IAAIC,IAAI,CAACH,aAAa,KAAK,SAAS,IAAIG,IAAI,CAACH,aAAa,KAAK,UAAU,GAAGG,IAAI,CAAC7C,KAAK,GAAG,CAAC,CAAC,EAAE,CAAC,CAAC;IAE3J,MAAMgD,iBAAiB,GAAG,CAAC,CAAC;IAC5B,MAAMC,YAAY,GAAGvD,IAAI,CAACE,UAAU,CAAC+C,MAAM,CAAC,CAACC,GAAG,EAAEX,SAAS,KAAK;MAAA,IAAAiB,qBAAA;MAC9D;MACA,MAAMC,oBAAoB,GAAG,EAAAD,qBAAA,GAAAxD,IAAI,CAACG,YAAY,CAACuD,IAAI,CAACC,CAAC,IAAIA,CAAC,CAACpB,SAAS,CAACH,GAAG,KAAKG,SAAS,CAACH,GAAG,CAAC,cAAAoB,qBAAA,uBAA9DA,qBAAA,CAAgEI,WAAW,KAAI,CAAC;MAC7G;MACA,MAAMC,OAAO,GAAGtB,SAAS,CAAChC,OAAO,GAAGkD,oBAAoB;MACxDH,iBAAiB,CAACf,SAAS,CAACH,GAAG,CAAC,GAAGyB,OAAO;MAC1C,OAAOX,GAAG,GAAGW,OAAO;IACtB,CAAC,EAAE,CAAC,CAAC;IAEL,MAAMC,2BAA2B,GAAG,CAAC,CAAC;IAEtC9D,IAAI,CAACE,UAAU,CAAC6D,OAAO,CAACxB,SAAS,IAAI;MACnC;MACA,MAAMyB,QAAQ,GAAGV,iBAAiB,CAACf,SAAS,CAACH,GAAG,CAAC,GAAGmB,YAAY;MAChE;MACAO,2BAA2B,CAACvB,SAAS,CAACH,GAAG,CAAC,GAAG;QAC3C7B,OAAO,EAAEyD,QAAQ,GAAGlB,YAAY;QAChCtC,QAAQ,EAAE+B,SAAS,CAAC/B,QAAQ,GAAG4C,aAAa;QAC5C3C,OAAO,EAAE8B,SAAS,CAAC0B,gBAAgB,GAAGZ;MACxC,CAAC;IACH,CAAC,CAAC;IAEF1C,oBAAoB,CAACmD,2BAA2B,CAAC;EACnD,CAAC,EAAE,CAAC9D,IAAI,CAAC,CAAC;EAEV,MAAMkE,mBAAmB,GAAG,MAAO3B,SAAS,IAAK;IAC/C,MAAM1B,KAAK,GAAGC,MAAM,CAACC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC;IAClD,MAAMG,KAAK,GAAG,IAAID,IAAI,CAAC,CAAC,CAACE,QAAQ,CAAC,CAAC,GAAG,CAAC;IACvC,MAAMC,IAAI,GAAG,IAAIH,IAAI,CAAC,CAAC,CAACI,WAAW,CAAC,CAAC;IACrC,IAAI;MACF;MACA,MAAM6C,wBAAwB,GAAG,MAAMzE,KAAK,CAAC8B,GAAG,CAAE,iBAAgBe,SAAS,CAACH,GAAI,EAAC,EAAC;QAChFX,OAAO,EAAG;UAACC,aAAa,EAAGb;QAAK;MAClC,CAAC,CAAC;MAEF,MAAMuD,8BAA8B,GAAGD,wBAAwB,CAACnE,IAAI,CAAC0D,IAAI,CAACW,OAAO,IAAIA,OAAO,CAAClD,KAAK,KAAKA,KAAK,IAAIkD,OAAO,CAAChD,IAAI,KAAKA,IAAK,CAAC;MAEvI,IAAI+C,8BAA8B,EAAE;QAClC;QACA,MAAM1E,KAAK,CAAC4E,MAAM,CAAE,iBAAgBF,8BAA8B,CAAChC,GAAI,EAAC,EAAE;UACxEX,OAAO,EAAG;YAACC,aAAa,EAAGb;UAAM;QACnC,CAAC,CAAC;MACJ;IACA,CAAC,CAAC,OAAO0D,KAAK,EAAE;MACd,IAAIA,KAAK,CAAC7B,QAAQ,IAAI6B,KAAK,CAAC7B,QAAQ,CAAC8B,MAAM,KAAK,GAAG,EAAE;QACjD;QACAC,OAAO,CAACF,KAAK,CAAC,sCAAsC,EAAEA,KAAK,CAAC;QAC5D;MACJ;MACA;IACF;IACF,IAAI;MAAA,IAAAG,qBAAA,EAAAC,sBAAA,EAAAC,sBAAA;MACF;MACA,MAAMC,WAAW,GAAG;QAClBtC,SAAS,EAAEA,SAAS,CAACH,GAAG;QACxBjB,KAAK,EAAE,IAAID,IAAI,CAAC,CAAC,CAACE,QAAQ,CAAC,CAAC,GAAG,CAAC;QAAG;QACnCC,IAAI,EAAE,IAAIH,IAAI,CAAC,CAAC,CAACI,WAAW,CAAC,CAAC;QAC9BwD,aAAa,EAAE,EAAAJ,qBAAA,GAAAhE,iBAAiB,CAAC6B,SAAS,CAACH,GAAG,CAAC,cAAAsC,qBAAA,uBAAhCA,qBAAA,CAAkCnE,OAAO,KAAI,CAAC;QAC7DwE,cAAc,EAAE,EAAAJ,sBAAA,GAAAjE,iBAAiB,CAAC6B,SAAS,CAACH,GAAG,CAAC,cAAAuC,sBAAA,uBAAhCA,sBAAA,CAAkCnE,QAAQ,KAAG,CAAC;QAC9DwE,aAAa,EAAE,EAAAJ,sBAAA,GAAAlE,iBAAiB,CAAC6B,SAAS,CAACH,GAAG,CAAC,cAAAwC,sBAAA,uBAAhCA,sBAAA,CAAkCnE,OAAO,KAAI,CAAC;QAC7DwE,YAAY,EAAE;MAChB,CAAC;MACD,MAAMvC,QAAQ,GAAG,MAAMhD,KAAK,CAACwF,IAAI,CAAC,eAAe,EAAEL,WAAW,EAAE;QAC9DpD,OAAO,EAAE;UAACC,aAAa,EAAEb;QAAK;MAChC,CAAC,CAAC;MACF,IAAI6B,QAAQ,CAAC8B,MAAM,KAAK,GAAG,EAAE;QAC3B7E,KAAK,CAACwF,OAAO,CAAC,6BAA6B,CAAC;MAC9C,CAAC,MAAI;QACHxF,KAAK,CAAC4E,KAAK,CAAC,0BAA0B,CAAC;MACzC;IACF,CAAC,QAAMA,KAAK,EAAC;MACXE,OAAO,CAACF,KAAK,CAAC,wBAAwB,EAAGA,KAAK,CAAC;IAEjD;EAEF,CAAC;EAID,oBACE1E,OAAA;IAAKuF,SAAS,EAAC,gBAAgB;IAAAC,QAAA,gBAC7BxF,OAAA;MAAIuF,SAAS,EAAC,MAAM;MAAAC,QAAA,EAAC;IAAkB;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,EAC3CzF,IAAI,CAACE,UAAU,CAACoC,GAAG,CAAEC,SAAS;MAAA,IAAAmD,sBAAA,EAAAC,sBAAA,EAAAC,sBAAA;MAAA,oBAC/B/F,OAAA;QAAyBuF,SAAS,EAAC,WAAW;QAACS,KAAK,EAAG;UAAEC,QAAQ,EAAE;QAAO,CAAE;QAAAT,QAAA,gBAC1ExF,OAAA;UAAKuF,SAAS,EAAC,mCAAmC;UAAAC,QAAA,GAC7C9C,SAAS,CAACwD,IAAI,EAAC,YAAU,EAACxD,SAAS,CAACyD,KAAK;QAAA;UAAAV,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACrC,CAAC,eACR5F,OAAA;UAAKuF,SAAS,EAAC,WAAW;UAAAC,QAAA,gBACxBxF,OAAA;YAAGuF,SAAS,EAAC,WAAW;YAAAC,QAAA,gBACpBxF,OAAA;cAAAwF,QAAA,EAAQ;YAAQ;cAAAC,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAQ,CAAC,KAAC,GAAAC,sBAAA,GAAChF,iBAAiB,CAAC6B,SAAS,CAACH,GAAG,CAAC,cAAAsD,sBAAA,uBAAhCA,sBAAA,CAAkCnF,OAAO,CAAC0F,OAAO,CAAC,CAAC,CAAC;UAAA;YAAAX,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAC9E,CAAC,eACJ5F,OAAA;YAAGuF,SAAS,EAAC,WAAW;YAAAC,QAAA,gBACtBxF,OAAA;cAAAwF,QAAA,EAAQ;YAAS;cAAAC,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAQ,CAAC,KAAC,GAAAE,sBAAA,GAACjF,iBAAiB,CAAC6B,SAAS,CAACH,GAAG,CAAC,cAAAuD,sBAAA,uBAAhCA,sBAAA,CAAkCnF,QAAQ,CAACyF,OAAO,CAAC,CAAC,CAAC;UAAA;YAAAX,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAChF,CAAC,eACJ5F,OAAA;YAAGuF,SAAS,EAAC,WAAW;YAAAC,QAAA,gBACxBxF,OAAA;cAAAwF,QAAA,EAAQ;YAAQ;cAAAC,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAQ,CAAC,KAAC,GAAAG,sBAAA,GAAClF,iBAAiB,CAAC6B,SAAS,CAACH,GAAG,CAAC,cAAAwD,sBAAA,uBAAhCA,sBAAA,CAAkCnF,OAAO,CAACwF,OAAO,CAAC,CAAC,CAAC;UAAA;YAAAX,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAC5E,CAAC,eACJ5F,OAAA;YAAQuF,SAAS,EAAE,iBAAiB;YAACc,OAAO,EAAEA,CAAA,KAAMhC,mBAAmB,CAAC3B,SAAS,CAAE;YAAA8C,QAAA,EAAC;UAAe;YAAAC,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAQ,CAAC;QAAA;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACzG,CAAC;MAAA,GAfFlD,SAAS,CAACH,GAAG;QAAAkD,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAgBlB,CAAC;IAAA,CACL,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACG,CAAC;AAEZ;AAAC1F,EAAA,CA7KQD,iBAAiB;AAAAqG,EAAA,GAAjBrG,iBAAiB;AA+K1B,eAAeA,iBAAiB;AAAC,IAAAqG,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}