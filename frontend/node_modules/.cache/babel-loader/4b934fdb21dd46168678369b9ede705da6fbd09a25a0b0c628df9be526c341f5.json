{"ast":null,"code":"import React,{useEffect,useState,useMemo}from'react';import axios from'axios';import'bootstrap/dist/css/bootstrap.min.css';import'react-toastify/dist/ReactToastify.css';import{toast}from'react-toastify';import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";function CalculateExpenses(){//Defining the Data set\nconst[data,setData]=useState({apartments:[],consumptions:[],building:{},expenses:[],total:{heating:0.0,elevator:0.0,general:0.0}});const[apartmentExpenses,setApartmentExpenses]=useState({});useEffect(()=>{//Fetching the Required data from the database\nconst fetchData=async()=>{const token=window.localStorage.getItem('token');const currentDate=new Date();const month=currentDate.getMonth()+1;const year=currentDate.getFullYear();//Get the administrator's profile and authorize him if he has valid token\nconst profileResponse=await axios.get('http://localhost:5000/api/profile',{headers:{Authorization:token}});if(profileResponse.data.profileId||profileResponse.data.userId){const buildingId=profileResponse.data.profileId;const userId=profileResponse.data.userId;//Building response , expensesResponse\nconst[buildingResponse,expensesResponse]=await Promise.all([axios.get(\"http://localhost:5000/api/buildings/\".concat(buildingId)),axios.get(\"http://localhost:5000/api/expenses/\".concat(userId))]);const fetchedBuilding=buildingResponse.data;//Apartments that are tied to the building Response\nconst apartmentsResponse=await axios.get(\"http://localhost:5000/aps/Apartments/\".concat(fetchedBuilding._id));const allConsumptionsResponses=await Promise.all(apartmentsResponse.data.map(apartment=>axios.get(\"http://localhost:5000/api/consumptions/\".concat(apartment._id))));//Consumptions Response\nconst allConsumptions=allConsumptionsResponses.flatMap(response=>response.data);//Filter the expenses for the current month and year\nconst thisMonthExpenses=expensesResponse.data.filter(expenses=>{return expenses.month===month&&expenses.year===year;});const newState={apartments:apartmentsResponse.data,building:buildingResponse.data,expenses:thisMonthExpenses,consumptions:allConsumptions};//Finally set the data with the New State of fetched objects\nsetData(newState);}};fetchData();},[]);//using the useMemo hook to memoize expensive computations so that they are not recalculated on every render\nuseMemo(()=>{//Calculation of the totals of every Expense with the use of reduce function\nconst totalHeating=data.expenses.filter(e=>e.type_expenses==='Heating').reduce((acc,curr)=>acc+curr.total,0);const totalElevator=data.expenses.filter(e=>e.type_expenses==='Elevator').reduce((acc,curr)=>acc+curr.total,0);const totalGeneral=data.expenses.reduce((acc,curr)=>acc+(curr.type_expenses!=='Heating'&&curr.type_expenses!=='Elevator'?curr.total:0),0);const apartmentProducts={};const totalProduct=data.apartments.reduce((acc,apartment)=>{var _data$consumptions$fi;//Get the consumption for every apartment\nconst apartmentConsumption=((_data$consumptions$fi=data.consumptions.find(c=>c.apartment._id===apartment._id))===null||_data$consumptions$fi===void 0?void 0:_data$consumptions$fi.consumption)||0;//Multiply the heating millimetre with the hours of every apartment\nconst product=apartment.heating*apartmentConsumption;apartmentProducts[apartment._id]=product;return acc+product;},0);const calculatedApartmentExpenses={};data.apartments.forEach(apartment=>{//Divide each apartment product with the total product\nconst division=apartmentProducts[apartment._id]/totalProduct;//Total heating is equal to the division of apartmentProducts with the total product\ncalculatedApartmentExpenses[apartment._id]={heating:division*totalHeating,elevator:apartment.elevator*totalElevator,general:apartment.general_expenses*totalGeneral};});setApartmentExpenses(calculatedApartmentExpenses);},[data]);const handleCreatePayment=async apartment=>{const token=window.localStorage.getItem('token');const month=new Date().getMonth()+1;const year=new Date().getFullYear();try{//Check if a specific paymnet exists for the current month and year\nconst existingPaymentsResponse=await axios.get(\"http://localhost:5000/api/payments/\".concat(apartment._id),{headers:{Authorization:token}});const existingPaymentForCurrentMonth=existingPaymentsResponse.data.find(payment=>payment.month===month&&payment.year===year);if(existingPaymentForCurrentMonth){// If payment exists for the current month and year , delete it\nawait axios.delete(\"http://localhost:5000/api/payments/\".concat(existingPaymentForCurrentMonth._id),{headers:{Authorization:token}});}}catch(error){if(error.response&&error.response.status!==404){// Log any other error and halt the function\nconsole.error('Error checking for existing payments',error);return;}// If the error is 404, it just means no payments exist for the apartment, and we'll continue to create a new one.\n}try{var _apartmentExpenses$ap,_apartmentExpenses$ap2,_apartmentExpenses$ap3;//Create new Payment\nconst paymentData={apartment:apartment._id,month:new Date().getMonth()+1,//JS months are 0-indexed.\nyear:new Date().getFullYear(),total_heating:((_apartmentExpenses$ap=apartmentExpenses[apartment._id])===null||_apartmentExpenses$ap===void 0?void 0:_apartmentExpenses$ap.heating)||0,total_elevator:((_apartmentExpenses$ap2=apartmentExpenses[apartment._id])===null||_apartmentExpenses$ap2===void 0?void 0:_apartmentExpenses$ap2.elevator)||0,total_general:((_apartmentExpenses$ap3=apartmentExpenses[apartment._id])===null||_apartmentExpenses$ap3===void 0?void 0:_apartmentExpenses$ap3.general)||0,payment_made:false};const response=await axios.post('http://localhost:5000/api/payments',paymentData,{headers:{Authorization:token}});if(response.status===200){toast.success(\"Payment Created succesfully\");}else{toast.error(\"Failed to create payment\");}}catch(error){console.error('Error creating payment',error);}};return/*#__PURE__*/_jsxs(\"div\",{className:\"container mt-5\",children:[/*#__PURE__*/_jsx(\"h1\",{className:\"mb-5\",children:\"Apartment Expenses\"}),data.apartments.map(apartment=>{var _apartmentExpenses$ap4,_apartmentExpenses$ap5,_apartmentExpenses$ap6;return/*#__PURE__*/_jsxs(\"div\",{className:\"card mb-3\",style:{maxWidth:\"18rem\"},children:[/*#__PURE__*/_jsxs(\"div\",{className:\"card-header bg-primary text-white\",children:[apartment.name,\" - Floor: \",apartment.floor]}),/*#__PURE__*/_jsxs(\"div\",{className:\"card-body\",children:[/*#__PURE__*/_jsxs(\"p\",{className:\"card-text\",children:[/*#__PURE__*/_jsx(\"strong\",{children:\"Heating:\"}),\" \",(_apartmentExpenses$ap4=apartmentExpenses[apartment._id])===null||_apartmentExpenses$ap4===void 0?void 0:_apartmentExpenses$ap4.heating.toFixed(2)]}),/*#__PURE__*/_jsxs(\"p\",{className:\"card-text\",children:[/*#__PURE__*/_jsx(\"strong\",{children:\"Elevator:\"}),\" \",(_apartmentExpenses$ap5=apartmentExpenses[apartment._id])===null||_apartmentExpenses$ap5===void 0?void 0:_apartmentExpenses$ap5.elevator.toFixed(2)]}),/*#__PURE__*/_jsxs(\"p\",{className:\"card-text\",children:[/*#__PURE__*/_jsx(\"strong\",{children:\"General:\"}),\" \",(_apartmentExpenses$ap6=apartmentExpenses[apartment._id])===null||_apartmentExpenses$ap6===void 0?void 0:_apartmentExpenses$ap6.general.toFixed(2)]}),/*#__PURE__*/_jsx(\"button\",{className:\"btn btn-success\",onClick:()=>handleCreatePayment(apartment),children:\" Create Payment\"})]})]},apartment._id);})]});}export default CalculateExpenses;","map":{"version":3,"names":["React","useEffect","useState","useMemo","axios","toast","jsx","_jsx","jsxs","_jsxs","CalculateExpenses","data","setData","apartments","consumptions","building","expenses","total","heating","elevator","general","apartmentExpenses","setApartmentExpenses","fetchData","token","window","localStorage","getItem","currentDate","Date","month","getMonth","year","getFullYear","profileResponse","get","headers","Authorization","profileId","userId","buildingId","buildingResponse","expensesResponse","Promise","all","concat","fetchedBuilding","apartmentsResponse","_id","allConsumptionsResponses","map","apartment","allConsumptions","flatMap","response","thisMonthExpenses","filter","newState","totalHeating","e","type_expenses","reduce","acc","curr","totalElevator","totalGeneral","apartmentProducts","totalProduct","_data$consumptions$fi","apartmentConsumption","find","c","consumption","product","calculatedApartmentExpenses","forEach","division","general_expenses","handleCreatePayment","existingPaymentsResponse","existingPaymentForCurrentMonth","payment","delete","error","status","console","_apartmentExpenses$ap","_apartmentExpenses$ap2","_apartmentExpenses$ap3","paymentData","total_heating","total_elevator","total_general","payment_made","post","success","className","children","_apartmentExpenses$ap4","_apartmentExpenses$ap5","_apartmentExpenses$ap6","style","maxWidth","name","floor","toFixed","onClick"],"sources":["/home/tonyg/Node-React.js-Expenses-Application/frontend/src/components/CalculateExpenses.js"],"sourcesContent":["import React, { useEffect, useState, useMemo } from 'react';\nimport axios from 'axios';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport 'react-toastify/dist/ReactToastify.css';\nimport { toast } from 'react-toastify';\nfunction CalculateExpenses() {\n  //Defining the Data set\n  const [data, setData] = useState({\n    apartments: [],\n    consumptions: [],\n    building: {},\n    expenses: [],\n    total: {\n      heating: 0.0,\n      elevator: 0.0,\n      general: 0.0,\n    },\n  });\n  const [apartmentExpenses, setApartmentExpenses] = useState({});\n  useEffect(() => {\n    //Fetching the Required data from the database\n    const fetchData = async () => {\n      const token = window.localStorage.getItem('token');\n\n      const currentDate = new Date();\n      const month = currentDate.getMonth() + 1;\n      const year = currentDate.getFullYear();\n      //Get the administrator's profile and authorize him if he has valid token\n      const profileResponse = await axios.get('http://localhost:5000/api/profile', {\n        headers: { Authorization: token },\n      });\n\n      if (profileResponse.data.profileId || profileResponse.data.userId) {\n        const buildingId = profileResponse.data.profileId;\n        const userId = profileResponse.data.userId;\n        //Building response , expensesResponse\n        const [buildingResponse, expensesResponse] = await Promise.all([\n          axios.get(`http://localhost:5000/api/buildings/${buildingId}`),\n          axios.get(`http://localhost:5000/api/expenses/${userId}`),\n        ]);\n        const fetchedBuilding = buildingResponse.data;\n        //Apartments that are tied to the building Response\n        const apartmentsResponse = await axios.get(`http://localhost:5000/aps/Apartments/${fetchedBuilding._id}`);\n        const allConsumptionsResponses = await Promise.all(\n          apartmentsResponse.data.map((apartment) =>\n            axios.get(`http://localhost:5000/api/consumptions/${apartment._id}`)\n          )\n        );\n        //Consumptions Response\n        const allConsumptions = allConsumptionsResponses.flatMap(response => response.data);\n        //Filter the expenses for the current month and year\n        const thisMonthExpenses = expensesResponse.data.filter(expenses => {\n          return expenses.month === month && expenses.year === year;\n        })\n        const newState = {\n          apartments: apartmentsResponse.data,\n          building: buildingResponse.data,\n          expenses: thisMonthExpenses,\n          consumptions: allConsumptions,\n        };\n        //Finally set the data with the New State of fetched objects\n        setData(newState);\n      }\n      \n    };\n    fetchData();\n  }, []);\n  //using the useMemo hook to memoize expensive computations so that they are not recalculated on every render\n  useMemo(() => {\n    //Calculation of the totals of every Expense with the use of reduce function\n    const totalHeating = data.expenses.filter(e => e.type_expenses === 'Heating').reduce((acc, curr) => acc + curr.total, 0);\n    const totalElevator = data.expenses.filter(e => e.type_expenses === 'Elevator').reduce((acc, curr) => acc + curr.total, 0);\n    const totalGeneral = data.expenses.reduce((acc, curr) => acc + (curr.type_expenses !== 'Heating' && curr.type_expenses !== 'Elevator' ? curr.total : 0), 0);\n    \n    const apartmentProducts = {};\n    const totalProduct = data.apartments.reduce((acc, apartment) => {\n      //Get the consumption for every apartment\n      const apartmentConsumption = data.consumptions.find(c => c.apartment._id === apartment._id)?.consumption || 0;\n      //Multiply the heating millimetre with the hours of every apartment\n      const product = apartment.heating * apartmentConsumption;\n      apartmentProducts[apartment._id] = product;\n      return acc + product;\n    }, 0);\n\n    const calculatedApartmentExpenses = {};\n       \n    data.apartments.forEach(apartment => {\n      //Divide each apartment product with the total product\n      const division = apartmentProducts[apartment._id] / totalProduct;\n      //Total heating is equal to the division of apartmentProducts with the total product\n      calculatedApartmentExpenses[apartment._id] = {\n        heating: division * totalHeating,\n        elevator: apartment.elevator * totalElevator ,\n        general: apartment.general_expenses * totalGeneral,\n      };\n    });\n\n    setApartmentExpenses(calculatedApartmentExpenses);\n  }, [data]);\n\n  const handleCreatePayment = async (apartment) => {\n    const token = window.localStorage.getItem('token');\n    const month = new Date().getMonth() + 1;\n    const year = new Date().getFullYear();\n    try {\n      //Check if a specific paymnet exists for the current month and year\n      const existingPaymentsResponse = await axios.get(`http://localhost:5000/api/payments/${apartment._id}`,{\n        headers : {Authorization : token},\n      });\n\n      const existingPaymentForCurrentMonth = existingPaymentsResponse.data.find(payment => payment.month === month && payment.year === year );\n\n      if (existingPaymentForCurrentMonth) {\n        // If payment exists for the current month and year , delete it\n        await axios.delete(`http://localhost:5000/api/payments/${existingPaymentForCurrentMonth._id}`, {\n          headers : {Authorization : token },\n        });\n      }\n      } catch (error) {\n        if (error.response && error.response.status !== 404) {\n            // Log any other error and halt the function\n            console.error('Error checking for existing payments', error);\n            return;\n        }\n        // If the error is 404, it just means no payments exist for the apartment, and we'll continue to create a new one.\n      }\n    try {\n      //Create new Payment\n      const paymentData = {\n        apartment: apartment._id,\n        month: new Date().getMonth() + 1 , //JS months are 0-indexed.\n        year: new Date().getFullYear(),\n        total_heating: apartmentExpenses[apartment._id]?.heating || 0,\n        total_elevator: apartmentExpenses[apartment._id]?.elevator|| 0,\n        total_general: apartmentExpenses[apartment._id]?.general || 0,\n        payment_made: false,\n      };\n      const response = await axios.post('http://localhost:5000/api/payments', paymentData, {\n        headers: {Authorization: token},\n      })\n      if (response.status === 200) {\n        toast.success(\"Payment Created succesfully\");\n      }else{\n        toast.error(\"Failed to create payment\")\n      }\n    }catch(error){\n      console.error('Error creating payment' , error);\n\n    }\n    \n  }\n\n  \n\n  return (\n    <div className='container mt-5'>\n      <h1 className='mb-5'>Apartment Expenses</h1>\n      {data.apartments.map((apartment) =>  (\n      <div key={apartment._id} className='card mb-3' style= {{ maxWidth: \"18rem\"}}>\n        <div className='card-header bg-primary text-white'>\n            {apartment.name} - Floor: {apartment.floor}\n            </div>\n          <div className='card-body'>\n            <p className='card-text'>\n                <strong>Heating:</strong> {apartmentExpenses[apartment._id]?.heating.toFixed(2)}\n              </p>\n              <p className='card-text'>\n                <strong>Elevator:</strong> {apartmentExpenses[apartment._id]?.elevator.toFixed(2)}\n              </p>\n              <p className='card-text'>\n              <strong>General:</strong> {apartmentExpenses[apartment._id]?.general.toFixed(2)}\n              </p>\n              <button className= 'btn btn-success' onClick={() => handleCreatePayment(apartment)}> Create Payment</button>\n            </div>\n      </div>\n      ))}\n      </div>\n  );\n}\n\nexport default CalculateExpenses;"],"mappings":"AAAA,MAAO,CAAAA,KAAK,EAAIC,SAAS,CAAEC,QAAQ,CAAEC,OAAO,KAAQ,OAAO,CAC3D,MAAO,CAAAC,KAAK,KAAM,OAAO,CACzB,MAAO,sCAAsC,CAC7C,MAAO,uCAAuC,CAC9C,OAASC,KAAK,KAAQ,gBAAgB,CAAC,OAAAC,GAAA,IAAAC,IAAA,gCAAAC,IAAA,IAAAC,KAAA,yBACvC,QAAS,CAAAC,iBAAiBA,CAAA,CAAG,CAC3B;AACA,KAAM,CAACC,IAAI,CAAEC,OAAO,CAAC,CAAGV,QAAQ,CAAC,CAC/BW,UAAU,CAAE,EAAE,CACdC,YAAY,CAAE,EAAE,CAChBC,QAAQ,CAAE,CAAC,CAAC,CACZC,QAAQ,CAAE,EAAE,CACZC,KAAK,CAAE,CACLC,OAAO,CAAE,GAAG,CACZC,QAAQ,CAAE,GAAG,CACbC,OAAO,CAAE,GACX,CACF,CAAC,CAAC,CACF,KAAM,CAACC,iBAAiB,CAAEC,oBAAoB,CAAC,CAAGpB,QAAQ,CAAC,CAAC,CAAC,CAAC,CAC9DD,SAAS,CAAC,IAAM,CACd;AACA,KAAM,CAAAsB,SAAS,CAAG,KAAAA,CAAA,GAAY,CAC5B,KAAM,CAAAC,KAAK,CAAGC,MAAM,CAACC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC,CAElD,KAAM,CAAAC,WAAW,CAAG,GAAI,CAAAC,IAAI,CAAC,CAAC,CAC9B,KAAM,CAAAC,KAAK,CAAGF,WAAW,CAACG,QAAQ,CAAC,CAAC,CAAG,CAAC,CACxC,KAAM,CAAAC,IAAI,CAAGJ,WAAW,CAACK,WAAW,CAAC,CAAC,CACtC;AACA,KAAM,CAAAC,eAAe,CAAG,KAAM,CAAA9B,KAAK,CAAC+B,GAAG,CAAC,mCAAmC,CAAE,CAC3EC,OAAO,CAAE,CAAEC,aAAa,CAAEb,KAAM,CAClC,CAAC,CAAC,CAEF,GAAIU,eAAe,CAACvB,IAAI,CAAC2B,SAAS,EAAIJ,eAAe,CAACvB,IAAI,CAAC4B,MAAM,CAAE,CACjE,KAAM,CAAAC,UAAU,CAAGN,eAAe,CAACvB,IAAI,CAAC2B,SAAS,CACjD,KAAM,CAAAC,MAAM,CAAGL,eAAe,CAACvB,IAAI,CAAC4B,MAAM,CAC1C;AACA,KAAM,CAACE,gBAAgB,CAAEC,gBAAgB,CAAC,CAAG,KAAM,CAAAC,OAAO,CAACC,GAAG,CAAC,CAC7DxC,KAAK,CAAC+B,GAAG,wCAAAU,MAAA,CAAwCL,UAAU,CAAE,CAAC,CAC9DpC,KAAK,CAAC+B,GAAG,uCAAAU,MAAA,CAAuCN,MAAM,CAAE,CAAC,CAC1D,CAAC,CACF,KAAM,CAAAO,eAAe,CAAGL,gBAAgB,CAAC9B,IAAI,CAC7C;AACA,KAAM,CAAAoC,kBAAkB,CAAG,KAAM,CAAA3C,KAAK,CAAC+B,GAAG,yCAAAU,MAAA,CAAyCC,eAAe,CAACE,GAAG,CAAE,CAAC,CACzG,KAAM,CAAAC,wBAAwB,CAAG,KAAM,CAAAN,OAAO,CAACC,GAAG,CAChDG,kBAAkB,CAACpC,IAAI,CAACuC,GAAG,CAAEC,SAAS,EACpC/C,KAAK,CAAC+B,GAAG,2CAAAU,MAAA,CAA2CM,SAAS,CAACH,GAAG,CAAE,CACrE,CACF,CAAC,CACD;AACA,KAAM,CAAAI,eAAe,CAAGH,wBAAwB,CAACI,OAAO,CAACC,QAAQ,EAAIA,QAAQ,CAAC3C,IAAI,CAAC,CACnF;AACA,KAAM,CAAA4C,iBAAiB,CAAGb,gBAAgB,CAAC/B,IAAI,CAAC6C,MAAM,CAACxC,QAAQ,EAAI,CACjE,MAAO,CAAAA,QAAQ,CAACc,KAAK,GAAKA,KAAK,EAAId,QAAQ,CAACgB,IAAI,GAAKA,IAAI,CAC3D,CAAC,CAAC,CACF,KAAM,CAAAyB,QAAQ,CAAG,CACf5C,UAAU,CAAEkC,kBAAkB,CAACpC,IAAI,CACnCI,QAAQ,CAAE0B,gBAAgB,CAAC9B,IAAI,CAC/BK,QAAQ,CAAEuC,iBAAiB,CAC3BzC,YAAY,CAAEsC,eAChB,CAAC,CACD;AACAxC,OAAO,CAAC6C,QAAQ,CAAC,CACnB,CAEF,CAAC,CACDlC,SAAS,CAAC,CAAC,CACb,CAAC,CAAE,EAAE,CAAC,CACN;AACApB,OAAO,CAAC,IAAM,CACZ;AACA,KAAM,CAAAuD,YAAY,CAAG/C,IAAI,CAACK,QAAQ,CAACwC,MAAM,CAACG,CAAC,EAAIA,CAAC,CAACC,aAAa,GAAK,SAAS,CAAC,CAACC,MAAM,CAAC,CAACC,GAAG,CAAEC,IAAI,GAAKD,GAAG,CAAGC,IAAI,CAAC9C,KAAK,CAAE,CAAC,CAAC,CACxH,KAAM,CAAA+C,aAAa,CAAGrD,IAAI,CAACK,QAAQ,CAACwC,MAAM,CAACG,CAAC,EAAIA,CAAC,CAACC,aAAa,GAAK,UAAU,CAAC,CAACC,MAAM,CAAC,CAACC,GAAG,CAAEC,IAAI,GAAKD,GAAG,CAAGC,IAAI,CAAC9C,KAAK,CAAE,CAAC,CAAC,CAC1H,KAAM,CAAAgD,YAAY,CAAGtD,IAAI,CAACK,QAAQ,CAAC6C,MAAM,CAAC,CAACC,GAAG,CAAEC,IAAI,GAAKD,GAAG,EAAIC,IAAI,CAACH,aAAa,GAAK,SAAS,EAAIG,IAAI,CAACH,aAAa,GAAK,UAAU,CAAGG,IAAI,CAAC9C,KAAK,CAAG,CAAC,CAAC,CAAE,CAAC,CAAC,CAE3J,KAAM,CAAAiD,iBAAiB,CAAG,CAAC,CAAC,CAC5B,KAAM,CAAAC,YAAY,CAAGxD,IAAI,CAACE,UAAU,CAACgD,MAAM,CAAC,CAACC,GAAG,CAAEX,SAAS,GAAK,KAAAiB,qBAAA,CAC9D;AACA,KAAM,CAAAC,oBAAoB,CAAG,EAAAD,qBAAA,CAAAzD,IAAI,CAACG,YAAY,CAACwD,IAAI,CAACC,CAAC,EAAIA,CAAC,CAACpB,SAAS,CAACH,GAAG,GAAKG,SAAS,CAACH,GAAG,CAAC,UAAAoB,qBAAA,iBAA9DA,qBAAA,CAAgEI,WAAW,GAAI,CAAC,CAC7G;AACA,KAAM,CAAAC,OAAO,CAAGtB,SAAS,CAACjC,OAAO,CAAGmD,oBAAoB,CACxDH,iBAAiB,CAACf,SAAS,CAACH,GAAG,CAAC,CAAGyB,OAAO,CAC1C,MAAO,CAAAX,GAAG,CAAGW,OAAO,CACtB,CAAC,CAAE,CAAC,CAAC,CAEL,KAAM,CAAAC,2BAA2B,CAAG,CAAC,CAAC,CAEtC/D,IAAI,CAACE,UAAU,CAAC8D,OAAO,CAACxB,SAAS,EAAI,CACnC;AACA,KAAM,CAAAyB,QAAQ,CAAGV,iBAAiB,CAACf,SAAS,CAACH,GAAG,CAAC,CAAGmB,YAAY,CAChE;AACAO,2BAA2B,CAACvB,SAAS,CAACH,GAAG,CAAC,CAAG,CAC3C9B,OAAO,CAAE0D,QAAQ,CAAGlB,YAAY,CAChCvC,QAAQ,CAAEgC,SAAS,CAAChC,QAAQ,CAAG6C,aAAa,CAC5C5C,OAAO,CAAE+B,SAAS,CAAC0B,gBAAgB,CAAGZ,YACxC,CAAC,CACH,CAAC,CAAC,CAEF3C,oBAAoB,CAACoD,2BAA2B,CAAC,CACnD,CAAC,CAAE,CAAC/D,IAAI,CAAC,CAAC,CAEV,KAAM,CAAAmE,mBAAmB,CAAG,KAAO,CAAA3B,SAAS,EAAK,CAC/C,KAAM,CAAA3B,KAAK,CAAGC,MAAM,CAACC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC,CAClD,KAAM,CAAAG,KAAK,CAAG,GAAI,CAAAD,IAAI,CAAC,CAAC,CAACE,QAAQ,CAAC,CAAC,CAAG,CAAC,CACvC,KAAM,CAAAC,IAAI,CAAG,GAAI,CAAAH,IAAI,CAAC,CAAC,CAACI,WAAW,CAAC,CAAC,CACrC,GAAI,CACF;AACA,KAAM,CAAA8C,wBAAwB,CAAG,KAAM,CAAA3E,KAAK,CAAC+B,GAAG,uCAAAU,MAAA,CAAuCM,SAAS,CAACH,GAAG,EAAG,CACrGZ,OAAO,CAAG,CAACC,aAAa,CAAGb,KAAK,CAClC,CAAC,CAAC,CAEF,KAAM,CAAAwD,8BAA8B,CAAGD,wBAAwB,CAACpE,IAAI,CAAC2D,IAAI,CAACW,OAAO,EAAIA,OAAO,CAACnD,KAAK,GAAKA,KAAK,EAAImD,OAAO,CAACjD,IAAI,GAAKA,IAAK,CAAC,CAEvI,GAAIgD,8BAA8B,CAAE,CAClC;AACA,KAAM,CAAA5E,KAAK,CAAC8E,MAAM,uCAAArC,MAAA,CAAuCmC,8BAA8B,CAAChC,GAAG,EAAI,CAC7FZ,OAAO,CAAG,CAACC,aAAa,CAAGb,KAAM,CACnC,CAAC,CAAC,CACJ,CACA,CAAE,MAAO2D,KAAK,CAAE,CACd,GAAIA,KAAK,CAAC7B,QAAQ,EAAI6B,KAAK,CAAC7B,QAAQ,CAAC8B,MAAM,GAAK,GAAG,CAAE,CACjD;AACAC,OAAO,CAACF,KAAK,CAAC,sCAAsC,CAAEA,KAAK,CAAC,CAC5D,OACJ,CACA;AACF,CACF,GAAI,KAAAG,qBAAA,CAAAC,sBAAA,CAAAC,sBAAA,CACF;AACA,KAAM,CAAAC,WAAW,CAAG,CAClBtC,SAAS,CAAEA,SAAS,CAACH,GAAG,CACxBlB,KAAK,CAAE,GAAI,CAAAD,IAAI,CAAC,CAAC,CAACE,QAAQ,CAAC,CAAC,CAAG,CAAC,CAAG;AACnCC,IAAI,CAAE,GAAI,CAAAH,IAAI,CAAC,CAAC,CAACI,WAAW,CAAC,CAAC,CAC9ByD,aAAa,CAAE,EAAAJ,qBAAA,CAAAjE,iBAAiB,CAAC8B,SAAS,CAACH,GAAG,CAAC,UAAAsC,qBAAA,iBAAhCA,qBAAA,CAAkCpE,OAAO,GAAI,CAAC,CAC7DyE,cAAc,CAAE,EAAAJ,sBAAA,CAAAlE,iBAAiB,CAAC8B,SAAS,CAACH,GAAG,CAAC,UAAAuC,sBAAA,iBAAhCA,sBAAA,CAAkCpE,QAAQ,GAAG,CAAC,CAC9DyE,aAAa,CAAE,EAAAJ,sBAAA,CAAAnE,iBAAiB,CAAC8B,SAAS,CAACH,GAAG,CAAC,UAAAwC,sBAAA,iBAAhCA,sBAAA,CAAkCpE,OAAO,GAAI,CAAC,CAC7DyE,YAAY,CAAE,KAChB,CAAC,CACD,KAAM,CAAAvC,QAAQ,CAAG,KAAM,CAAAlD,KAAK,CAAC0F,IAAI,CAAC,oCAAoC,CAAEL,WAAW,CAAE,CACnFrD,OAAO,CAAE,CAACC,aAAa,CAAEb,KAAK,CAChC,CAAC,CAAC,CACF,GAAI8B,QAAQ,CAAC8B,MAAM,GAAK,GAAG,CAAE,CAC3B/E,KAAK,CAAC0F,OAAO,CAAC,6BAA6B,CAAC,CAC9C,CAAC,IAAI,CACH1F,KAAK,CAAC8E,KAAK,CAAC,0BAA0B,CAAC,CACzC,CACF,CAAC,MAAMA,KAAK,CAAC,CACXE,OAAO,CAACF,KAAK,CAAC,wBAAwB,CAAGA,KAAK,CAAC,CAEjD,CAEF,CAAC,CAID,mBACE1E,KAAA,QAAKuF,SAAS,CAAC,gBAAgB,CAAAC,QAAA,eAC7B1F,IAAA,OAAIyF,SAAS,CAAC,MAAM,CAAAC,QAAA,CAAC,oBAAkB,CAAI,CAAC,CAC3CtF,IAAI,CAACE,UAAU,CAACqC,GAAG,CAAEC,SAAS,OAAA+C,sBAAA,CAAAC,sBAAA,CAAAC,sBAAA,oBAC/B3F,KAAA,QAAyBuF,SAAS,CAAC,WAAW,CAACK,KAAK,CAAG,CAAEC,QAAQ,CAAE,OAAO,CAAE,CAAAL,QAAA,eAC1ExF,KAAA,QAAKuF,SAAS,CAAC,mCAAmC,CAAAC,QAAA,EAC7C9C,SAAS,CAACoD,IAAI,CAAC,YAAU,CAACpD,SAAS,CAACqD,KAAK,EACrC,CAAC,cACR/F,KAAA,QAAKuF,SAAS,CAAC,WAAW,CAAAC,QAAA,eACxBxF,KAAA,MAAGuF,SAAS,CAAC,WAAW,CAAAC,QAAA,eACpB1F,IAAA,WAAA0F,QAAA,CAAQ,UAAQ,CAAQ,CAAC,IAAC,EAAAC,sBAAA,CAAC7E,iBAAiB,CAAC8B,SAAS,CAACH,GAAG,CAAC,UAAAkD,sBAAA,iBAAhCA,sBAAA,CAAkChF,OAAO,CAACuF,OAAO,CAAC,CAAC,CAAC,EAC9E,CAAC,cACJhG,KAAA,MAAGuF,SAAS,CAAC,WAAW,CAAAC,QAAA,eACtB1F,IAAA,WAAA0F,QAAA,CAAQ,WAAS,CAAQ,CAAC,IAAC,EAAAE,sBAAA,CAAC9E,iBAAiB,CAAC8B,SAAS,CAACH,GAAG,CAAC,UAAAmD,sBAAA,iBAAhCA,sBAAA,CAAkChF,QAAQ,CAACsF,OAAO,CAAC,CAAC,CAAC,EAChF,CAAC,cACJhG,KAAA,MAAGuF,SAAS,CAAC,WAAW,CAAAC,QAAA,eACxB1F,IAAA,WAAA0F,QAAA,CAAQ,UAAQ,CAAQ,CAAC,IAAC,EAAAG,sBAAA,CAAC/E,iBAAiB,CAAC8B,SAAS,CAACH,GAAG,CAAC,UAAAoD,sBAAA,iBAAhCA,sBAAA,CAAkChF,OAAO,CAACqF,OAAO,CAAC,CAAC,CAAC,EAC5E,CAAC,cACJlG,IAAA,WAAQyF,SAAS,CAAE,iBAAiB,CAACU,OAAO,CAAEA,CAAA,GAAM5B,mBAAmB,CAAC3B,SAAS,CAAE,CAAA8C,QAAA,CAAC,iBAAe,CAAQ,CAAC,EACzG,CAAC,GAfF9C,SAAS,CAACH,GAgBf,CAAC,EACL,CAAC,EACG,CAAC,CAEZ,CAEA,cAAe,CAAAtC,iBAAiB"},"metadata":{},"sourceType":"module","externalDependencies":[]}